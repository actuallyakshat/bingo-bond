generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique ///@encrypted
  name             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBonds     Bond[]   @relation("admin_bond")
  memberships      Member[] @relation("user_memberships")
  invites          Invite[]
  emailPreferences Boolean  @default(true)
}

model Bond {
  id          String     @id @default(uuid())
  name        String ///@encrypted
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id], name: "admin_bond", onDelete: Cascade)
  members     Member[]
  bingoCard   BingoCard?
  invites     Invite[]
  memories    Memory[]

  @@index([createdById])
}

model Invite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bondId    String
  bond      Bond     @relation(fields: [bondId], references: [id], onDelete: Cascade)
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bondId    String
  bond      Bond     @relation(fields: [bondId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("user_memberships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bondId, userId])
  @@index([bondId])
  @@index([userId])
}

model BingoCard {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  bondId    String      @unique
  bond      Bond        @relation(fields: [bondId], references: [id], onDelete: Cascade)
  cells     BingoCell[]
  plans     Plan[]

  @@index([bondId])
}

model BingoCell {
  id       String    @id @default(uuid())
  position Int
  activity String ///@encrypted
  cardId   String
  card     BingoCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  plan     Plan?

  @@unique([cardId, position])
  @@index([cardId])
}

model Plan {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  cellId          String    @unique
  cell            BingoCell @relation(fields: [cellId], references: [id], onDelete: Cascade)
  cardId          String
  card            BingoCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  planDate        DateTime
  planDescription String ///@encrypted
  memory          Memory?   @relation(fields: [memoryId], references: [id])
  memoryId        String?   @unique
  completed       Boolean   @default(false)

  @@index([cellId])
}

model Memory {
  id          String    @id @default(uuid())
  name        String ///@encrypted
  description String ///@encrypted
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  memoryDate  DateTime
  pictures    Picture[]
  bondId      String
  bond        Bond      @relation(fields: [bondId], references: [id], onDelete: Cascade)
  plan        Plan?
}

model Picture {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memoryId  String
  memory    Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  url       String ///@encrypted
}
